#include <iostream>
#include <sstream>
#include <vector>
#include <iomanip>
#include <map>
using namespace std;

/**
  THIS CODE COUNTS NUMBER OF HAMILTONIAN PATHS CONNECTING
  ANY GIVEN STARTING CELL WITH ANY GIVEN ENDING CELL IN A
  R x C GRID WITH UP/DOWN LEFT/RIGHT EDGES.  FOR LARGER
  VALUES OF R, CODE CAN BE USED TO CALCULATE THE RECURSION
  WHICH CAN BE USED TO SOLVE THE PROBLEM.

  CELLS ARE 0-INDEXED.  CELL ( a, b ) CAN BE EXCLUDED USING
      grid.excludeCell( a, b );

  FOR HAMILTONIAN PATHS CONNECTING TOP LEFT WITH TOP RIGHT:
      STARTING CELL ( 0, 0 )
      ENDING CELL   ( 0, C - 1 )
    FOR INPUT  X 4   generates http://oeis.org/A181688
    FOR INPUT  X 5   generates http://oeis.org/A181689

  FOR HAMILTONIAN PATHS CONNECTING OPPOSITE CORNERS:
      STARTING CELL ( 0, 0 )
      ENDING CELL   ( R - 1, C - 1 )
    FOR INPUT  X 4   generates http://oeis.org/A014523
    FOR INPUT  X 5   generates http://oeis.org/A014584

  FOR HAMILTONIAN CYCLES:
      STARTING CELL ( 0, 0 )
      ENDING CELL   ( 0, 1 )
    FOR INPUT  X 4   generates http://oeis.org/A006864
    FOR INPUT  X 5   generates http://oeis.org/A006865
    FOR INPUT  X 6   generates http://oeis.org/A145401
    FOR INPUT  X 7   generates http://oeis.org/A145416
    FOR INPUT  X 8   generates http://oeis.org/A145418
    FOR INPUT  X 9   generates http://oeis.org/A160149
**/

class  Biggy  {
    using  i64 = int64_t;
    using  u64 = uint64_t;

  public:
    inline static constexpr int  base_dig = 6;
    inline static constexpr u64  base     = 1000000;
    inline static constexpr u64  basebase = 1LL*base*base;

    int          sgn = 1;
    vector<u64>  v{};

  public:
    // CONSTRUCTORS
    Biggy(){}
    Biggy( i64 val )  {
        u64  x;
        if( val < 0 ) { sgn = -1;  x = -val; }
        else  x = val;
        for( ; x>0 ; x/=base )   v.emplace_back( x %base );
    }
    Biggy( const string &s )  { read( s ); }

    // INPUT OUTPUT
    friend ostream &operator << ( ostream &stream, const Biggy &val )  {
        if( val.sgn == -1 )   stream << '-';
        stream << ( val.v.size() ? val.v.back() : 0 );
        for( int i=(int)val.v.size() - 2; i >= 0 ; --i )
            stream << setw( base_dig ) << setfill( '0' ) << val.v[i];
        return  stream;
    }
    friend istream& operator >> ( istream &stream, Biggy &b )  {
        string  s;   stream >> s;   b.read( s );
        return stream;
    }

    // COMPARISON OPERATORS
    bool  operator < ( const Biggy &b ) const  {
        if( sgn != b.sgn )   return  sgn < b.sgn;
        if( size() != b.size() )
            return  (int)size() * sgn < (int)b.size() * b.sgn;
        for( int i=(int)size() - 1 ; i>=0 ; --i )
            if( v[i] != b[i] )
                return  v[i] * sgn < b[i] * b.sgn;
        return  false;
    }
    bool  operator >  ( const Biggy &b ) const  { return  b < *this; }
    bool  operator <= ( const Biggy &b ) const  { return  !( b < *this ); }
    bool  operator >= ( const Biggy &b ) const  { return  !( *this < b ); }
    bool  operator == ( const Biggy &b ) const  {
                        return  !( *this < b )  &&  !( b < *this ); }
    bool  operator != ( const Biggy &b ) const  { return *this < b || b < *this; }

    // ARITHMETIC OPERATORS WITH BIGGY
    Biggy  abs() const  { Biggy res = *this;  res.sgn = 1;  return res; }
    Biggy  operator - () const { Biggy res=*this; res.sgn=-sgn; return res; }
    inline Biggy  &operator ++ () { return *this += 1; }
    inline Biggy  &operator -- () { return *this -= 1; }

    Biggy  operator + ( const Biggy &val ) const  {
        if( sgn != val.sgn )   return  *this - (-val);
        u64  carry = 0;  Biggy  res = val;
        for( size_t i=0 ; i<max( size(), val.size() ) || carry ; ++i )  {
            if( i == res.size() )   res.v.emplace_back( 0 );
            res[i] += carry + ( i<size() ? v[i] : 0 );
            carry = res[i] >= base;
            if( carry )   res[i] -= base;
        }
        return  res.trim();
    }

    Biggy  operator - ( const Biggy &b ) const  {
        if( sgn != b.sgn )      return  *this + ( -b );
        if( abs() < b.abs() )   return  -( b - *this );
        Biggy  res = *this;
        int    carry = 0;

        for( int i=0 ; i<(int)b.size() || carry ; ++i )  {
            i64  x = res[i];
            x -= carry + ( i < (int)b.size() ? b[i] : 0 );
            carry = x < 0;
            if( carry )   res[i] = base + x;
            else          res[i] = x;
        }
        return  res.trim();
    }

    Biggy  operator * ( const Biggy &b ) const  {
        if( !size() || !b.size() )   return Biggy( 0 );

        size_t  n = size(),  m = b.size();
        vector<u64>  ans( n + m - 1, 0 );
        if( n < m )
            for( size_t j=0 ; j<m ; ++j )
                for( size_t i=0 ; i<n ; ++i )   ans[i+j] += (*this)[i]*b[j];
        else
            for( size_t i=0 ; i<n ; ++i )
                for( size_t j=0 ; j<m ; ++j )   ans[i+j] += (*this)[i]*b[j];

        Biggy  A;
        A.v.assign( ans.size(), 0 );
        u64  carry = 0;
        for( size_t i=0 ; i<ans.size() ; ++i  )  {
            u64  cur = ans[i] + carry;
            if( cur >= base )  {
                A[i]  = cur % base;
                carry = cur/base;
            }
            else {
                A[i]  = cur;
                carry = 0;
            }
        }
        if( carry )  A.v.push_back( carry );

        A.sgn = ( sgn == b.sgn ) ? 1 : -1;
        return  A.trim();
    }

    Biggy  &operator /= ( const Biggy& x )  {
        Biggy  a = abs(),  b = x.abs();
        sgn = ( sgn != x.sgn ) ? -1 : 1;
        if( a < b )             return  *this = Biggy();
        if( b == Biggy( 1 ) )   return  *this = a;
        Biggy   inv( basebase / b.v.back() );
        Biggy   pre = Biggy( 0 ),  res( 0 );
        size_t  d   = 1 + a.size() - b.size();
        size_t  cur = 2,  bcur = 1;

        while( inv != pre  ||  bcur < b.size() )  {
            bcur  = min( bcur << 1, b.size() );
            res.v = { b.v.end() - bcur, b.v.end() };
            pre   = inv;
            inv  *= ( ( Biggy( 2 ) << ( cur + bcur - 1  ) ) - inv*res );
            cur   = min( cur << 1, d );
            inv.v = { inv.v.end() - cur, inv.v.end() };
        }

        inv.v = { inv.v.end() - d, inv.v.end() };
        res   = a * inv;
        res >>= ( a.size() );
        Biggy  mul = res * b;
        while( mul + b <= a )  { res += Biggy( 1 );  mul += b; }
        v = res.v;
        return  *this;
    }

    Biggy  operator % ( const Biggy &x ) const { return  (*this) - x*( (*this)/x ); }

    pair<Biggy, Biggy>  divMod( const Biggy &y )  {
        Biggy  Q = (*this) / y;
        return  make_pair( Q, (*this) - Q*y );
    }

    static Biggy  gcd( const Biggy &a, const Biggy &b ) {
        return b.isZero() ? a : gcd( b, a %b );
    }
    static Biggy  lcm( const Biggy &a, const Biggy &b ) {
        return a/gcd( a, b )*b;
    }

    Biggy  &operator += ( const Biggy &b )  { *this = *this + b;  return *this; }
    Biggy  &operator -= ( const Biggy &b )  { *this = *this - b;  return *this; }
    Biggy  &operator *= ( const Biggy &b )  { *this = *this * b;  return *this; }
    Biggy  &operator %= ( const Biggy &b )  { *this = (*this)%b;  return *this; }
    Biggy   operator  / ( const Biggy& x ) const { Biggy b(*this);  return b /= x; }

   // ARITMETIC OPERATORS WITH INTS
   Biggy  &operator *= ( int64_t val )  {
        if( val < 0 )   sgn = -sgn,  val = -val;
        u64  m = val,  carry = 0;
        for( size_t i=0 ; i<v.size()  ||  carry ; ++i )  {
            if( i == v.size() )  v.emplace_back( 0 );
            u64  cur = v[i]*m + carry;
            carry = cur/base;
            v[i]  = cur %base;
        }
        return  (*this).trim();
    }

    Biggy  &operator /= ( int64_t b )  {
        if( b < 0 )   sgn = -sgn,  b = -b;
        u64  d = b;
        for( int i=size() - 1, rem = 0 ; i>=0 ; --i )  {
            u64  cur = v[i] + rem * base;
            v[i] = cur / d;
            rem  = cur % d;
        }
        return  (*this).trim();
    }

    i64  operator % ( i64 val ) const  {
        i64  m = 0;
        for( int i=size()-1 ; i>=0 ; --i )   m = ( v[i] + m*base ) %val;
        return  m;
    }

    Biggy  operator / ( i64 val )  { Biggy  res = *this;  return  res /= val; }
    Biggy  operator * ( i64 val )  { Biggy  res = *this;  return  res *= val; }

  private:
    u64  &operator [] ( int x )              { return( v[x] ); }
    const u64  &operator [] ( int x )  const { return( v[x] ); }
    bool  isZero() const { return  v.empty() || ( size() == 1  &&  !v[0] ); }
    size_t  size() const { return v.size(); }
    Biggy&  trim()  {
        while( !v.empty() && !v.back() )   v.pop_back();
        if( v.empty() )  sgn = 1;
        return  *this;
    }

    Biggy  &operator <<= ( const int& x )  {
        if( !isZero() )  {
            vector<u64>  add( x, 0 );
            v.insert( v.begin(), add.begin(), add.end() );
        }
        return *this;
    }
    Biggy  &operator >>= ( const int& x )  {
        v = vector<u64>( v.begin() + min( x, (int)v.size() ), v.end() );
        return  *this;
    }
    Biggy  operator << ( const int& x )  const{ return  Biggy( *this ) <<= x; }
    Biggy  operator >> ( const int& x )  const{ return  Biggy( *this ) >>= x; }

    void  read( const string &s )  {
        v.clear();
        int  pos = 0;
        sgn = 1;
        while( pos < (int)s.size()  &&  ( s[pos] == '-' || s[pos] == '+' ) )  {
            if( s[pos] == '-' )   sgn = -sgn;
            ++pos;
        }
        for( int i=(int)s.size()-1 ; i>=pos ; i-=base_dig )  {
            u64  x = 0;
            for( int j=max( pos, i - base_dig + 1 ) ; j<=i ; ++j )
                x = x*10 + s[j] - '0';
            v.emplace_back( x );
        }
        trim();
    }
    string  toString() const  {
        ostringstream  s;
        if( sgn == -1 )    s << '-';
        s << ( v.empty() ? 0 : v.back() );
        for( int i=(int)size()-2 ; i>=0 ; --i )
            s << setw( base_dig ) << setfill( '0' ) << v[i];
        return  s.str();
    }
};

class Cell
{
  public:
    Cell*  pathEnd;
    int    connections;

  public:
    // TWO CELLS ARE "EQUAL" IF THEY HAVE SAME  pathEnd  VALUES.
    // USED WHEN DETECTING CYCLES.
    bool operator < ( const Cell& r2 ) const
    {  return this->pathEnd < r2.pathEnd;  }
};

class Connection
{
  private:
    Cell*  m_cell;
    Cell*  m_nbr;
    Cell*  m_cellEnd;
    Cell*  m_nbrEnd;
    bool   m_connected;

  public:
    Connection( Cell* r, Cell* n )  {
        m_cell      = r;
        m_nbr       = n;
        m_connected = false;

        if( m_cell->connections != 2  &&  m_nbr->connections != 2 )  {
            // CHECK FOR CYCLE
            if( m_cell != m_nbr->pathEnd )  {
                // UPDATE PATH ENDPOINTS
                m_cellEnd          = m_cell->pathEnd;
                m_nbrEnd           = m_nbr->pathEnd;
                m_connected        = true;
                m_cellEnd->pathEnd = m_nbrEnd;
                m_nbrEnd->pathEnd  = m_cellEnd;
                ++m_cell->connections;
                ++m_nbr->connections;
            }
        }
    }

    ~Connection()  {
        // RESTORE TO ORIGINAL CONDITION
        if( m_connected )  {
            m_cellEnd->pathEnd = m_cell;
            m_nbrEnd->pathEnd  = m_nbr;
            --m_cell->connections;
            --m_nbr->connections;
        }
    }

    inline operator bool() const { return m_connected; }
};

template< typename T >
class  Grid
{
    using  StateList = map< vector<Cell>, T >;

  private:
    size_t                  R;
    size_t                  C;
    vector< vector<Cell> >  grid;

  public:
    Grid() : R( 1 ), C( 1 ), grid( {{1}} ) {}

    Grid( size_t r, size_t c ) : R( r ), C( c )  {
        grid.resize( r + 1 );
        for( size_t r=0 ; r<=R ; ++r )  {
            grid[r].resize( C + 1 );
            for( size_t c=0 ; c<=C ; ++c )  {
                Cell* cell    = &grid[r][c];
                cell->pathEnd = cell;
                if( c < C  &&  r < R )    cell->connections = 0;
                else                      cell->connections = 2;
            }
        }
    }

    void  setEndpoints( size_t r1, size_t c1, size_t r2, size_t c2 )  {
        grid[r1][c1].connections = 1;   grid[r2][c2].connections = 1;
    }

    T  solve()  {
        T  solutions = 0;

        // INITIALIZE  curStates  WITH FIRST ROW, SET COUNT = 1
        StateList  curStates;
        curStates[grid[0]] = 1;

        for( size_t row=0 ; row<R ; ++row )  {
            StateList  nextStates;

            for( auto cur : curStates )  {
                // PLACE CURRENT STATE IN ROW  row
                grid[row]   = cur.first;
                T  curCount = cur.second;

                // ENSURE pathEnd POINTS TO cell FOR ALL col ENTRIES.
                for( size_t col=0 ; col<C ; ++col )  {
                    Cell* cell             = &grid[row][col];
                    cell->pathEnd->pathEnd = cell;
                }
                solve( nextStates, curCount, row, 0, solutions );
            }
            curStates = nextStates;
        }
        return  solutions;
    }

  private:
    void  solve( StateList &nextStates, const T &curCount,
                 size_t row, size_t col, T &solutions )  {
        if( col == C )  {
            if( row + 1 == R )  solutions += curCount;
            else                nextStates[grid[row + 1]] += curCount;
            return;
        }

        Cell  *cell      = &grid[row][col];
        Cell  *cellRight = &grid[row][col + 1];
        Cell  *cellDown  = &grid[row + 1][col];

        if( cell->connections == 2 )
            return  solve( nextStates, curCount, row, col + 1, solutions );

        if( cell->connections == 0 )  {
            if( auto cr = Connection( cell, cellRight ) )
                if( auto cd = Connection( cell, cellDown ) )
                    solve( nextStates, curCount, row, col + 1, solutions );
            return;
        }

        if( auto cr = Connection( cell, cellRight ) )
            solve( nextStates, curCount, row, col + 1, solutions );

        if( auto cd = Connection( cell, cellDown ) )
            solve( nextStates, curCount, row, col + 1, solutions );
    }
};


// INPUT FORMAT:
// TYPICALLY R >= C ... THE GRID IS TALL AND THIN. THIS CODE
// CALCULATES THE NUMBER OF HAMILTONIAN PATHS BETWEEN 2 CELLS
// IN A R x C GRID WITH UP/DOWN LEFT/RIGHT EDGES.
// WITH THE CHOICES OF BEGIN AND END CELLS BELOW, THIS FINDS
// THE NUMBER OF HAMILTONIAN TOURS ON THE GRID.

int  main()
{
    ios_base::sync_with_stdio( false );
    cin.tie( NULL );

    size_t  R, C;
    cin >> R >> C;

    Grid< Biggy >  G( R, C );
    G.setEndpoints( 0, 0, 0, 1 );  // COUNTS HAMILTONIAN TOURS
    auto  ans = G.solve();

    cout << "Rows: " << R << "  Cols: " << C << '\n';
    cout << "Num Paths:  " << ans << '\n';

    return  0;
}

// TESTED ON  https://oeis.org/A003763  INPUT 14 14
